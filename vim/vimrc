
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Configuration for the plugin manager
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-fugitive'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'PProvost/vim-ps1' 
Plug 'tmhedberg/SimpylFold'
Plug 'vim-scripts/indentpython.vim'
Plug 'vim-syntastic/syntastic'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-syntastic/syntastic'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'lervag/vimtex'
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }
Plug 'haystackandroid/cosmic_latte'

call plug#end()

" Coc Vim
let g:coc_disable_startup_warning = 1

" fzf.vim
noremap <C-p> :Files<Cr>

" Theme section 
set background=dark
set termguicolors

" Cosmic Latte
colorscheme cosmic_latte
let g:airline_theme='cosmic_latte_dark'

" Gruvbox
" let g:gruvbox_transparent_bg=1
" colorscheme gruvbox

" Start Nerdtree only when no filename specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" vim-pydocstring change docstring type to numpy
let g:pydocstring_doq_path = '/home/skr/.local/bin/doq'
let g:pydocstring_formatter = 'numpy'

" Enable folding with the spacebar
nnoremap <space> za

" Show docstring for folded code
let g:SimpylFold_docstring_preview=1

" Indentation settings for py files
au BufNewFile, BufRead *.py
                        \ set tabstop=4
                        \ set softtabstop=4
                        \ set shiftwidth=4
                        \ set textwidth=79
                        \ set expandtab
                        \ set autoindent
                        \ set fileformat=unix

" Highlight bad whitespaces
au BufRead, BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

python3 << EOF
import os
import subprocess

if "VIRTUAL_ENV" in os.environ:
    project_base_dir = os.environ["VIRTUAL_ENV"]
    script = os.path.join(project_base_dir, "bin/activate")
    pipe = subprocess.Popen(". %s; env" % script, stdout=subprocess.PIPE, shell=True)
    output = pipe.communicate()[0].decode('utf8').splitlines()
    env = dict((line.split("=", 1) for line in output))
    os.environ.update(env)

EOF

" Vim integrated configuration
syntax on
filetype indent on
set showmode
set showcmd
set encoding=utf-8
set t_Co=256
set autoindent
set expandtab
set number 
set cursorline
set showmatch
set noerrorbells
set relativenumber
set rnu
set hlsearch
set smartcase
set ignorecase
set incsearch
set ruler
set undolevels=1000
set backspace=indent,eol,start

" Enable folding
set foldmethod=indent
set foldlevel=99

" Autocomplete brackets
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
inoremap <expr> ) getline('.')[getpos('.')[2] - 1] == ')' ? '<Right>' : ')'
inoremap <expr> ] getline('.')[getpos('.')[2] - 1] == ']' ? '<Right>' : ']'
inoremap <expr> } getline('.')[getpos('.')[2] - 1] == '}' ? '<Right>' : '}'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

" Remap window switch keys
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Transparent Background
hi Normal guibg=NONE ctermbg=NONE

" Enable spellcheck on files with .tex extension
autocmd BufNewFile,BufRead *.tex set spell spelllang=en_us

" Compile .tex files automatically when saving the buffer
function! RedrawScreen(channel)
    redraw!
endfunction

function! RunLatexmk()
    let tex_file = expand('%:p')    " current file
    let tex_cmd = 'latexmk -pdf -interaction=nonstopmode -cd ' . tex_file
    let s:job = job_start(['/bin/sh', '-c', tex_cmd],
        \ {'close_cb': 'RedrawScreen'})
endfunction

autocmd BufWrite *.tex :call RunLatexmk()

" Insert a python breakpoint and save
function! InsertStringAbove(string)
        exe "normal! O" . a:string . "\<Esc>"
        :w
endfunction
function! RemoveAllLinesWithStringInBuffer(string)
        exe ":g/" . a:string . "/d"
        :w
endfunction
let breakpoint = "import pdb; pdb.set_trace()"
nnoremap <C-b> :call InsertStringAbove(breakpoint)<CR>
nnoremap <C-n> :call RemoveAllLinesWithStringInBuffer(breakpoint)<CR>

" Set syntax highlighting for Splunk conf files
autocmd BufRead,BufNewFile *.conf setf dosini
